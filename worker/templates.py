"""
Template rendering for agent reports and PR descriptions
"""

import os
import json
from datetime import datetime
from typing import Dict, Any, Optional, List

def render_progress_panel(issue_number: int, actor: str, job_id: str, 
                         initialized: bool = False, locate: bool = False, 
                         propose: bool = False, fix: bool = False, 
                         verify: bool = False, ready: bool = False) -> str:
    """Render PR progress panel with enhanced visual design"""
    
    def stage_status(completed: bool, in_progress: bool = False) -> str:
        if completed:
            return '✅'
        elif in_progress:
            return '🔄'
        else:
            return '⏳'
    
    # Determine current stage for in-progress indicator
    current_stage = None
    if not locate:
        current_stage = 'locate'
    elif not propose:
        current_stage = 'propose'  
    elif not fix:
        current_stage = 'fix'
    elif not verify:
        current_stage = 'verify'
    elif not ready:
        current_stage = 'ready'
    
    panel = f"""## 🤖 GitCode Bug Fix Agent - 处理进度

### 📊 实时进度跟踪

| 阶段 | 状态 | 描述 | 完成时间 |
|------|------|------|----------|
| 🔍 **问题定位** | {stage_status(locate, current_stage == 'locate')} | 深度分析问题，识别相关文件 | {'✓' if locate else '-'} |
| 💡 **方案设计** | {stage_status(propose, current_stage == 'propose')} | 制定详细修复策略和计划 | {'✓' if propose else '-'} |
| 🛠️ **代码修改** | {stage_status(fix, current_stage == 'fix')} | 实施代码修复和优化 | {'✓' if fix else '-'} |
| ✅ **验证测试** | {stage_status(verify, current_stage == 'verify')} | 功能测试和质量验证 | {'✓' if verify else '-'} |
| 🎯 **准备完成** | {stage_status(ready, current_stage == 'ready')} | 修复完成，准备代码审查 | {'✓' if ready else '-'} |

### 📋 任务详情

```
📝 Issue编号    : #{issue_number}
👤 触发用户     : @{actor}  
🆔 任务ID      : {job_id}
⏰ 创建时间     : {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
🔄 当前状态     : {'🎉 处理完成' if ready else f'🔄 正在{current_stage}阶段' if current_stage else '🚀 启动中'}
```

### 📁 生成的文档和报告

{('✅' if locate else '⏳')} **`agent/analysis.md`** - 问题诊断和根因分析报告
{('✅' if propose else '⏳')} **`agent/patch_plan.json`** - 完整修复策略和实施计划  
{('✅' if verify else '⏳')} **`agent/report.txt`** - 验证测试结果和质量报告

### 🚀 AI驱动的智能修复

- **🧠 AI分析**: 使用大语言模型进行深度问题分析
- **🎯 精准定位**: 智能识别问题文件和修复点
- **🛡️ 质量保证**: 确保修复方案的安全性和兼容性
- **📊 全程追踪**: 每个阶段都有详细进度反馈

---
*� 本修复由 [GitCode Bug Fix Agent](https://gitcode.com) 自动生成*
*💬 如有疑问或建议，请在Issue或PR中留言反馈*"""
    
    return panel

def render_analysis(issue_title: str, issue_body: str, candidate_files: Optional[List[str]] = None) -> str:
    """Render analysis.md template"""
    
    if not candidate_files:
        candidate_files = ["src/main.py", "src/utils.py", "README.md"]
    
    analysis = f"""# Agent Analysis Report

## Issue Summary
**Title:** {issue_title}

**Description:**
{issue_body}

## Analysis Results (Demo)

### Candidate Files
Based on issue analysis, these files are likely related to the problem:

"""
    
    for i, file_path in enumerate(candidate_files, 1):
        analysis += f"{i}. `{file_path}` - Potential fix location\n"
    
    analysis += f"""
### Analysis Method
- Keyword matching in issue description
- File structure analysis  
- Recent changes review (simulated)

### Confidence Level
🟡 **Medium** (Demo mode - using pattern matching)

---
Generated by Agent at {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
"""
    
    return analysis

def render_patch_plan(issue_title: str, target_files: Optional[List[str]] = None) -> str:
    """Render patch_plan.json template"""
    
    if not target_files:
        target_files = ["README.md"]
    
    plan = {
        "patch_plan": {
            "issue_title": issue_title,
            "generated_at": datetime.utcnow().isoformat(),
            "strategy": "demo_safe_patch",
            "patches": []
        }
    }
    
    for file_path in target_files:
        if "README" in file_path.upper():
            patch = {
                "file": file_path,
                "type": "append",
                "description": "Add agent fix demo section",
                "content": "Agent demo fix applied",
                "risk_level": "low",
                "reversible": True
            }
        else:
            patch = {
                "file": file_path,
                "type": "modify",
                "description": f"Apply fix to {file_path}",
                "content": "# Agent demo modification",
                "risk_level": "low", 
                "reversible": True
            }
        
        plan["patch_plan"]["patches"].append(patch)
    
    return json.dumps(plan, indent=2, ensure_ascii=False)

def render_report(build_success: bool = True, test_results: Optional[Dict[str, Any]] = None, 
                 deploy_url: Optional[str] = None) -> str:
    """Render report.txt template"""
    
    if not test_results:
        test_results = {
            "passed": 42,
            "failed": 0,
            "skipped": 3,
            "coverage": "0% (demo)"
        }
    
    if not deploy_url:
        import uuid
        deploy_id = str(uuid.uuid4())[:8]
        deploy_url = f"https://demo.agent-fix.example/{deploy_id}"
    
    report = f"""# Agent Verification Report

## Build Status
✅ **SUCCESS** - Build completed successfully (demo)

## Test Results  
📊 **Test Summary:**
- Passed: {test_results['passed']}
- Failed: {test_results['failed']}
- Skipped: {test_results['skipped']}
- Coverage: {test_results['coverage']}

## Demo Deployment
🚀 **Deployment URL:** {deploy_url}
📅 **Deployed at:** {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC

## Verification Steps
1. ✅ Code compilation check
2. ✅ Syntax validation  
3. ✅ Demo test execution
4. ✅ Deployment simulation

---
*Note: This is a demonstration environment*
Report generated at {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
"""
    
    return report

def render_deploy_info(deploy_url: str) -> str:
    """Render deployment information"""
    
    deploy_info = f"""

## Deployment Update
🎯 **Live Demo:** {deploy_url}
⚡ **Status:** Active (demo environment)
🔗 **Valid until:** {datetime.utcnow().strftime('%Y-%m-%d')} (24h demo)

"""
    return deploy_info
