"""
Template rendering for agent reports and PR descriptions
"""

import os
import json
from datetime import datetime
from typing import Dict, Any, Optional, List

def render_progress_panel(issue_number: int, actor: str, job_id: str, 
                         initialized: bool = False, locate: bool = False, 
                         propose: bool = False, fix: bool = False, 
                         verify: bool = False, ready: bool = False) -> str:
    """Render PR progress panel"""
    
    def checkbox(checked: bool) -> str:
        return 'x' if checked else ' '
    
    panel = f"""## 🤖 Agent Progress

- [{checkbox(initialized)}] **Initialized** - Repository and branch setup
- [{checkbox(locate)}] **Locate** - Identify problem files and root cause
- [{checkbox(propose)}] **Propose** - Generate detailed fix strategy
- [{checkbox(fix)}] **Fix** - Apply code modifications
- [{checkbox(verify)}] **Verify** - Validate changes and test results
- [{checkbox(ready)}] **Ready** - Complete and ready for review

### 📋 Task Info
- **Issue:** #{issue_number}
- **Triggered by:** @{actor}
- **Job ID:** `{job_id}`
- **Created:** {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC

### 📁 Generated Files
- `agent/analysis.md` - Detailed problem analysis and diagnosis
- `agent/patch_plan.json` - Comprehensive fix strategy and implementation plan
- `agent/report.txt` - Verification results and change validation

---
*🚀 Automated bug analysis and fix by Agent*"""
    
    return panel

def render_analysis(issue_title: str, issue_body: str, candidate_files: Optional[List[str]] = None) -> str:
    """Render analysis.md template"""
    
    if not candidate_files:
        candidate_files = ["src/main.py", "src/utils.py", "README.md"]
    
    analysis = f"""# Agent Analysis Report

## Issue Summary
**Title:** {issue_title}

**Description:**
{issue_body}

## Analysis Results (Demo)

### Candidate Files
Based on issue analysis, these files are likely related to the problem:

"""
    
    for i, file_path in enumerate(candidate_files, 1):
        analysis += f"{i}. `{file_path}` - Potential fix location\n"
    
    analysis += f"""
### Analysis Method
- Keyword matching in issue description
- File structure analysis  
- Recent changes review (simulated)

### Confidence Level
🟡 **Medium** (Demo mode - using pattern matching)

---
Generated by Agent at {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
"""
    
    return analysis

def render_patch_plan(issue_title: str, target_files: Optional[List[str]] = None) -> str:
    """Render patch_plan.json template"""
    
    if not target_files:
        target_files = ["README.md"]
    
    plan = {
        "patch_plan": {
            "issue_title": issue_title,
            "generated_at": datetime.utcnow().isoformat(),
            "strategy": "demo_safe_patch",
            "patches": []
        }
    }
    
    for file_path in target_files:
        if "README" in file_path.upper():
            patch = {
                "file": file_path,
                "type": "append",
                "description": "Add agent fix demo section",
                "content": "Agent demo fix applied",
                "risk_level": "low",
                "reversible": True
            }
        else:
            patch = {
                "file": file_path,
                "type": "modify",
                "description": f"Apply fix to {file_path}",
                "content": "# Agent demo modification",
                "risk_level": "low", 
                "reversible": True
            }
        
        plan["patch_plan"]["patches"].append(patch)
    
    return json.dumps(plan, indent=2, ensure_ascii=False)

def render_report(build_success: bool = True, test_results: Optional[Dict[str, Any]] = None, 
                 deploy_url: Optional[str] = None) -> str:
    """Render report.txt template"""
    
    if not test_results:
        test_results = {
            "passed": 42,
            "failed": 0,
            "skipped": 3,
            "coverage": "0% (demo)"
        }
    
    if not deploy_url:
        import uuid
        deploy_id = str(uuid.uuid4())[:8]
        deploy_url = f"https://demo.agent-fix.example/{deploy_id}"
    
    report = f"""# Agent Verification Report

## Build Status
✅ **SUCCESS** - Build completed successfully (demo)

## Test Results  
📊 **Test Summary:**
- Passed: {test_results['passed']}
- Failed: {test_results['failed']}
- Skipped: {test_results['skipped']}
- Coverage: {test_results['coverage']}

## Demo Deployment
🚀 **Deployment URL:** {deploy_url}
📅 **Deployed at:** {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC

## Verification Steps
1. ✅ Code compilation check
2. ✅ Syntax validation  
3. ✅ Demo test execution
4. ✅ Deployment simulation

---
*Note: This is a demonstration environment*
Report generated at {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
"""
    
    return report

def render_deploy_info(deploy_url: str) -> str:
    """Render deployment information"""
    
    deploy_info = f"""

## Deployment Update
🎯 **Live Demo:** {deploy_url}
⚡ **Status:** Active (demo environment)
🔗 **Valid until:** {datetime.utcnow().strftime('%Y-%m-%d')} (24h demo)

"""
    return deploy_info
